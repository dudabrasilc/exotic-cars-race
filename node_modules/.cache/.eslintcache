[{"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/index.js":"1","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/App.js":"2","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/reportWebVitals.js":"3","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/NavBar.js":"4","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Login.js":"5","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Collection.js":"6","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/SignUp.js":"7","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Form.js":"8","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/CarsPage.js":"9","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RaceTracks.js":"10","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Home.js":"11","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RacesPage.js":"12","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RaceCard.js":"13","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RaceTrackCard.js":"14","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/SearchBar.js":"15","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/CarCard.js":"16","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/CarRaceImage.js":"17"},{"size":626,"mtime":1679881475600,"results":"18","hashOfConfig":"19"},{"size":4573,"mtime":1680069577187,"results":"20","hashOfConfig":"19"},{"size":362,"mtime":1679881475601,"results":"21","hashOfConfig":"19"},{"size":1153,"mtime":1679881475252,"results":"22","hashOfConfig":"19"},{"size":1929,"mtime":1680070080409,"results":"23","hashOfConfig":"19"},{"size":759,"mtime":1679881475251,"results":"24","hashOfConfig":"19"},{"size":3055,"mtime":1680071991718,"results":"25","hashOfConfig":"19"},{"size":5557,"mtime":1680071979325,"results":"26","hashOfConfig":"19"},{"size":3545,"mtime":1680069589854,"results":"27","hashOfConfig":"19"},{"size":536,"mtime":1679881475253,"results":"28","hashOfConfig":"19"},{"size":1039,"mtime":1680069600989,"results":"29","hashOfConfig":"19"},{"size":5311,"mtime":1680071919153,"results":"30","hashOfConfig":"19"},{"size":7019,"mtime":1680069644352,"results":"31","hashOfConfig":"19"},{"size":890,"mtime":1679881475253,"results":"32","hashOfConfig":"19"},{"size":713,"mtime":1679881475254,"results":"33","hashOfConfig":"19"},{"size":1310,"mtime":1679881475251,"results":"34","hashOfConfig":"19"},{"size":1262,"mtime":1680069582227,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"qi8qik",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"43"},"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/index.js",[],[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/App.js",[],[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/reportWebVitals.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/NavBar.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Login.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Collection.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/SignUp.js",["92","93","94"],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Form.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/CarsPage.js",["95","96","97"],[],"import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { CarsDataContext } from \"../App\";\n\nconst CarsPage = ({ user, races, setRaces, addCarToRace }) => {\n  const [selectedRace, setSelectedRace] = useState(user?.races[0]?.id);\n  let navigate = useNavigate();\n  const { id } = useParams();\n  const [carData, setCarData] = useState(null);\n  const { carsData, setCarsData } = useContext(CarsDataContext);\n\n  useEffect(() => {\n    fetch(`/cars/${id}`)\n      .then((res) => res.json())\n      .then((data) => {\n        setCarData(data);\n      });\n  }, [id]);\n\n  if (!carData) {\n    return <div>Loading...</div>;\n  }\n\n  const { make, model, year, engine, power, torque, zero_to_sixty_mph, top_speed, image } = carData;\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    fetch(\"/races_cars\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        race_id: selectedRace,\n        car_id: id,\n      }),\n    })\n      .then((r) => r.json())\n      .then((data) => {\n        addCarToRace(data);\n        navigate(\"/my-races\");\n      })\n      .then((ata) => {\n        alert(`${make} ${model} was added to the list successfuly!`);\n      });\n  }\n\n  return (\n    <div className=\"bg-car\">\n      <div className=\"box-car\">\n        {user ?\n          <div>\n            <div>\n              <img className=\"car-img\" src={image} alt=\"car image\" />\n              <h4 className=\"bigtitle\">\n                {make}\n              </h4>\n              <br></br>\n              <h4 className=\"model-details\">{model}</h4>\n              <div className=\"typebox1\">\n              </div>\n            </div>\n            <table className=\"table\">\n              <tr className=\"car-attributes\">\n                <td>Make:</td>\n                <td>{make}</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>Model:</td>\n                <td>{model}</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>Year:</td>\n                <td>{year}</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>Engine:</td>\n                <td>{engine}</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>Power:</td>\n                <td>{power}</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>Torque:</td>\n                <td>{torque}</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>0-60mph:</td>\n                <td>{zero_to_sixty_mph}s</td>\n              </tr>\n              <tr className=\"car-attributes\">\n                <td>Top Speed:</td>\n                <td>{top_speed}mph</td>\n              </tr>\n            </table>\n            <br></br>\n            <div className=\"teamselection\">\n              <select className=\"selections\" name=\"selectList\" id=\"selectList\" value={selectedRace} onChange={(e) => setSelectedRace(e.target.value)} >\n                {races.map(race => {\n                  return <option className=\"options\" name=\"selectedRace\" value={race.id}> {race.name} </option>\n                })}\n              </select>\n              <form className=\"add\" onSubmit={handleSubmit}>\n                <button>Add to Race</button>\n              </form>\n            </div>\n          </div>\n          :\n          navigate(\"/app-login\")\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default CarsPage;\n\n","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RaceTracks.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/Home.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RacesPage.js",["98","99","100","101"],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RaceCard.js",["102","103"],[],"import React, { useState, useEffect } from \"react\";\nimport CarRaceImage from \"./CarRaceImage\";\n\nfunction RaceCard({ deleteRace, deleteCar, raceId, updateFavorite }) {\n  const [show, setShow] = useState(false);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [result, setResult] = useState(null);\n  const [hasMinimumCars, setHasMinimumCars] = useState(true);\n  const [showResult, setShowResult] = useState(false);\n  const [race, setRace] = useState([]);\n\n  useEffect(() => {\n    fetch(`/races/${raceId}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        setIsFavorite(data.is_favorited);\n      });\n  }, [raceId]);\n\n  useEffect(() => {\n    fetch(`/races/${raceId}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        setRace(data);\n      });\n  }, []);\n\n  if (!race) {\n    return null; // or some other fallback UI\n  }\n\n  const racesCar =\n    race.races_cars && race.races_cars.find((racesCar) => {\n      return toString(racesCar.race_id) === toString(race.id);\n    });\n\n  // this component is responsible to render all functionality of a racecard: delete race button,\n\n\n  const handleDeleteCar = (carId) => {\n    if (race && race.races_cars && racesCar) {\n      const racesCarToDelete = race.races_cars.find(\n        (racesCar) => racesCar.car_id === carId\n      );\n  \n      if (racesCarToDelete) {\n        fetch(`/races_cars/${racesCarToDelete.id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(resp => resp.json())\n          .then(data => {\n            deleteCar(carId);\n          })\n          .catch(err => {\n            console.log(\"Error deleting race car:\", err);\n          });\n      }\n    }\n  };\n  \n\n    const handleDeleteRace = () => {\n      if (race) {\n        fetch(`/races/${race.id}`, {\n          method: 'DELETE',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(resp => resp.json())\n          .then(data => {\n            deleteRace(race.id);\n          })\n          .catch(err => {\n            console.log(\"Error deleting race:\", err);\n          });\n      }\n    };\n\n  \n    function handleFavorite() {\n      if (race) {\n        fetch(`/races/${race.id}`, {\n          method: \"PATCH\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({\n            is_favorited: !isFavorite\n          }),\n        })\n          .then(r => r.json())\n          .then(data => {\n            setIsFavorite(isFavorite => !isFavorite);\n            updateFavorite(data);\n          })\n          .catch(err => {\n            console.log(\"Error updating favorite:\", err);\n          });\n      }\n    }\n\n  function handleClick() {\n\n  setShowResult(true)\n\n  if (race.cars.length >= 2) { // Check if there are at least 2 cars in the race\n    const trackLength = parseFloat(race?.race_track?.length); // Get the length of the race track and convert it to a float\n    const trackTurns = parseInt(race?.race_track?.turns); // Get the number of turns in the race track and convert it to an integer\n    const trackVerticalGain = parseInt(race?.race_track?.vertical_gain); // Get the vertical gain of the race track and convert it to an integer\n  \n    const carPerformanceScores = race?.cars?.map(car => { // Loop through each car in the race and calculate its performance score\n      \n        const carPower = parseFloat(car.power.split(\" \")[0]); // Get the power of the car and convert it to a float\n        const carTorque = parseFloat(car.torque.split(\" \")[0]); // Get the torque of the car and convert it to a float\n\n        const speedScore = car.top_speed / (trackLength * trackTurns); // Calculate the speed score of the car\n        const handlingScore = (carPower + carTorque) / car.weight; // Calculate the handling score of the car\n        const hillClimbScore = (carPower + carTorque) / trackVerticalGain; // Calculate the hill climb score of the car\n        const totalScore = speedScore + handlingScore + hillClimbScore; // Calculate the total score of the car\n\n        return {car: car, score: totalScore}; // Return an object with the car and its performance score\n    });\n  \n    const sortedScores = carPerformanceScores && carPerformanceScores.length > 0 ? carPerformanceScores.sort((a, b) => b.score - a.score) : []; // Sort the cars based on their performance score in descending order\n\n    const highestScore = sortedScores[0]?.score; // Get the performance score of the car with the highest score\n    const lowestScore = sortedScores[sortedScores.length - 1]?.score; // Get the performance score of the car with the lowest score\n    const range = highestScore - lowestScore; // Calculate the range of performance scores\n    \n      const result = sortedScores.map(car => {\n          const percentage = ((car.score - lowestScore) / range * 0.8 + 0.1) * 100;\n          const explanation = `The ${car.car.make} ${car.car.model} has a score of ${car.score.toFixed(2)}, which gives it a winning chance between ${(percentage - 5).toFixed(2)}% and ${percentage.toFixed(2)}%. This car has a top speed of ${car.car.top_speed} mph, a zero-to-sixty time of ${car.car.zero_to_sixty_mph} seconds, and a weight of ${car.car.weight} pounds. Based on these attributes, this car is ${(percentage).toFixed(2)}% likely to win the race on this track.`;\n          return (\n              <>\n              <div className=\"results\">\n                  <h1>{car.car.make} - {car.car.model}</h1>\n                  <h2>Winning Chance: {`${(percentage - 5).toFixed(2)}% - ${percentage.toFixed(2)}%`}</h2>\n                  <h3>{explanation}</h3>\n              </div>\n              </>\n          \n          );\n      });\n  \n  \n      setResult(result)\n    \n\n  } else {\n      setHasMinimumCars(false)\n  }\n     \n    }\n\n\n  return(\n      <div className=\"race-card\">\n          <h2 className=\"race-title\">{race?.name} - {race?.race_track?.name}</h2>\n          <i class=\"fa-solid fa-pen-to-square cursor-pointer fa-2xl\" style={{ color: '#290465', textShadow: '1px 1px white'}} onClick={(e) => setShow(!show)}></i>\n          {/* favorite star */}\n           <i className={isFavorite ? \"fa-solid fa-star fa-2xl\" : \"fa-regular fa-star fa-2xl\" } onClick={handleFavorite} />\n           {/* first function in the image div is show and hide the X. the link is the image of the races car */}\n          <CarRaceImage race={race} setRace={setRace} handleDeleteCar={handleDeleteCar} show={show}/>\n          <button className=\"deletebutton\" onClick={handleDeleteRace}>DELETE RACE</button>\n          <br></br>\n          <br></br>\n          <button className=\"racebutton\" onClick={handleClick} >LET'S RACE!  🏁</button>\n          {/* <hr></hr> */}\n          {/* <h1 className=\"result-title\">{showResult ? \"Race Result\" : null}</h1> */}\n          {result}\n          <div className=\"error-minimum\">{hasMinimumCars ? null : \"Error: A race must have at least 2 cars.\"}</div>   \n      </div>\n  )\n}\n\n\nexport default RaceCard;","/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/RaceTrackCard.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/SearchBar.js",[],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/CarCard.js",["104"],[],"/Users/dudabrasilc/Development/code/phase-5/pre-project/client/src/components/CarRaceImage.js",["105","106"],[],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction CarRaceImage({ race, setRace, handleDeleteCar, show }) {\n  const [racesCars, setRacesCars] = useState([]);\n\n  useEffect(() => {\n    fetch(`/race/${race.id}`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        setRace(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    fetch(`/races_cars`)\n      .then((resp) => resp.json())\n      .then((data) => {\n        setRacesCars(data);\n      });\n  }, [handleDeleteCar]);\n\n  const carImages =\n    race.cars &&\n    racesCars\n      .filter((racesCar) => racesCar.race_id === race.id)\n      .map((racesCar) => {\n        return (\n          <div className=\"imgdiv\" key={racesCar.id}>\n           <i\n              className={show ? \"show fa-solid fa-xmark fa-xl\" : \"hide\"}\n              onClick={() => {\n                handleDeleteCar(racesCar.car.id)\n              }}\n            ></i>\n            <Link to={`/${racesCar.car.id}/details`}>\n              <img\n                className=\"car-race-img\"\n                src={racesCar.car.image}\n                alt=\"car-image\"\n              />\n            </Link>\n          </div>\n        );\n      });\n\n  return <>{carImages}</>;\n}\n\nexport default CarRaceImage;\n",{"ruleId":"107","severity":1,"message":"108","line":13,"column":10,"nodeType":"109","messageId":"110","endLine":13,"endColumn":32},{"ruleId":"107","severity":1,"message":"111","line":48,"column":9,"nodeType":"109","messageId":"110","endLine":48,"endColumn":20},{"ruleId":"107","severity":1,"message":"112","line":57,"column":9,"nodeType":"109","messageId":"110","endLine":57,"endColumn":22},{"ruleId":"107","severity":1,"message":"113","line":10,"column":11,"nodeType":"109","messageId":"110","endLine":10,"endColumn":19},{"ruleId":"107","severity":1,"message":"114","line":10,"column":21,"nodeType":"109","messageId":"110","endLine":10,"endColumn":32},{"ruleId":"115","severity":1,"message":"116","line":54,"column":15,"nodeType":"117","endLine":54,"endColumn":70},{"ruleId":"107","severity":1,"message":"118","line":2,"column":10,"nodeType":"109","messageId":"110","endLine":2,"endColumn":19},{"ruleId":"107","severity":1,"message":"119","line":7,"column":12,"nodeType":"109","messageId":"110","endLine":7,"endColumn":18},{"ruleId":"120","severity":1,"message":"121","line":23,"column":6,"nodeType":"122","endLine":23,"endColumn":8,"suggestions":"123"},{"ruleId":"120","severity":1,"message":"124","line":41,"column":6,"nodeType":"122","endLine":41,"endColumn":8,"suggestions":"125"},{"ruleId":"107","severity":1,"message":"126","line":9,"column":10,"nodeType":"109","messageId":"110","endLine":9,"endColumn":20},{"ruleId":"120","severity":1,"message":"127","line":26,"column":6,"nodeType":"122","endLine":26,"endColumn":8,"suggestions":"128"},{"ruleId":"115","severity":1,"message":"116","line":8,"column":42,"nodeType":"117","endLine":8,"endColumn":99},{"ruleId":"120","severity":1,"message":"129","line":13,"column":6,"nodeType":"122","endLine":13,"endColumn":8,"suggestions":"130"},{"ruleId":"115","severity":1,"message":"116","line":37,"column":15,"nodeType":"117","endLine":41,"endColumn":17},"no-unused-vars","'showPasswordMatchError' is assigned a value but never used.","Identifier","unusedVar","'handleClick' is assigned a value but never used.","'passwordMatch' is assigned a value but never used.","'carsData' is assigned a value but never used.","'setCarsData' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'useParams' is defined but never used.","'errors' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setRacesCars'. Either include it or remove the dependency array. If 'setRacesCars' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["131"],"React Hook useEffect has a missing dependency: 'setRaces'. Either include it or remove the dependency array. If 'setRaces' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["132"],"'showResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'raceId'. Either include it or remove the dependency array.",["133"],"React Hook useEffect has missing dependencies: 'race.id' and 'setRace'. Either include them or remove the dependency array. If 'setRace' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["134"],{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},"Update the dependencies array to be: [setRacesCars]",{"range":"143","text":"144"},"Update the dependencies array to be: [setRaces]",{"range":"145","text":"146"},"Update the dependencies array to be: [raceId]",{"range":"147","text":"148"},"Update the dependencies array to be: [race.id, setRace]",{"range":"149","text":"150"},[810,812],"[setRacesCars]",[1216,1218],"[setRaces]",[794,796],"[raceId]",[358,360],"[race.id, setRace]"]